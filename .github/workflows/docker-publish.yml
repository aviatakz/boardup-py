name: Deploy

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: boardup-py-prod
  IMAGE_ID: docker.pkg.github.com/${{ github.repository }}/boardup-py-prod

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
#  test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Run tests
#        run: |
#          if [ -f docker-compose.test.yml ]; then
#            docker-compose --file docker-compose.test.yml build
#            docker-compose --file docker-compose.test.yml run sut
#          else
#            docker build . --file Dockerfile-prod
#          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
#    needs: test

    runs-on: ubuntu-latest
#    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile-prod --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy package to digitalocean
        uses: appleboy/ssh-action@master
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DB_NAME: ${{ secrets.NAME }}
          DB_USER: ${{ secrets.USER }}
          DB_PASSWORD: ${{ secrets.PASSWORD }}
          DB_HOST: ${{ secrets.HOST }}
          DB_PORT: ${{ secrets.PORT }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          envs: GITHUB_USERNAME, GITHUB_TOKEN, IMAGE_ID, DB_NAME, DB_USER, DB_PASSWORD, DB_HOST,
          DB_PORT
          script: |
            docker stop $(docker ps -a -q)
            docker login docker.pkg.github.com -u ${{ github.actor }} -p $GITHUB_TOKEN
            echo $IMAGE_ID:latest
            docker pull $IMAGE_ID:latest
            docker run -dit -p 8000:8000 \
             -e DB_NAME=$DB_NAME \
             -e DB_USER=DB_USER \
             -e DB_PASSWORD=DB_PASSWORD \
             -e DB_HOST=DB_HOST \
             -e DB_PORT=DB_PORT \
            $IMAGE_ID:latest
